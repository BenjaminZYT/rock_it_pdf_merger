# -*- coding: utf-8 -*-
"""PDF Merger

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1b6QEvTjH3vzSAk5TOrvOB2F48f7W3byP
"""

# Function to merge selected PDFs
def merge_pdfs(pdfs):
    pdf_writer = PyPDF2.PdfWriter()
    for pdf in pdfs:
        pdf_reader = PyPDF2.PdfReader(pdf)
        for page_num in range(len(pdf_reader.pages)):
            page = pdf_reader.pages[page_num]
            pdf_writer.add_page(page)

    # Save merged PDF
    output_pdf = '/content/merged_output.pdf'
    with open(output_pdf, 'wb') as output:
        pdf_writer.write(output)
    return output_pdf

# Upload PDFs from the user's device
uploaded = files.upload()

# Merge PDFs
pdf_files = list(uploaded.keys())
merged_pdf = merge_pdfs(pdf_files)

# Provide the merged PDF for download
files.download(merged_pdf)

import PyPDF2
from google.colab import files
from IPython.display import display, HTML

# Function to merge selected PDFs
def merge_pdfs(pdfs):
    pdf_writer = PyPDF2.PdfWriter()
    for pdf in pdfs:
        pdf_reader = PyPDF2.PdfReader(pdf)
        for page_num in range(len(pdf_reader.pages)):
            page = pdf_reader.pages[page_num]
            pdf_writer.add_page(page)

    # Save merged PDF
    output_pdf = '/content/merged_output.pdf'
    with open(output_pdf, 'wb') as output:
        pdf_writer.write(output)
    return output_pdf

# Upload PDFs from the user's device
uploaded = files.upload()

# Show a single message while merging and downloading
display(HTML("<h3>Merging and downloading...</h3>"))

# Merge PDFs
pdf_files = list(uploaded.keys())
merged_pdf = merge_pdfs(pdf_files)

# Provide the merged PDF for download
files.download(merged_pdf)

!pip install PyPDF2

import PyPDF2
from google.colab import files
from IPython.display import display, HTML

# Function to merge selected PDFs
def merge_pdfs(pdfs, output_name):
    pdf_writer = PyPDF2.PdfWriter()
    for pdf in pdfs:
        pdf_reader = PyPDF2.PdfReader(pdf)
        for page_num in range(len(pdf_reader.pages)):
            page = pdf_reader.pages[page_num]
            pdf_writer.add_page(page)

    # Ensure the output name ends with .pdf extension
    if not output_name.endswith('.pdf'):
        output_name += '.pdf'

    # Save merged PDF
    output_pdf = f'/content/{output_name}'
    with open(output_pdf, 'wb') as output:
        pdf_writer.write(output)
    return output_pdf

# Upload PDFs from the user's device
uploaded = files.upload()

# Ask for a customized name or use default, prompt on a new line
display(HTML("<h3>Type in a customized name for the merged file and hit Enter (or just hit Enter to use the default 'merged_output.pdf'):</h3>"))
custom_name = input()

# If the user doesn't provide a custom name, use the default
if not custom_name:
    custom_name = "merged_output.pdf"

# Show a message that merging is in progress
display(HTML("<h3>‚è≥ Merging and downloading... ‚è≥</h3>"))

# Merge PDFs
pdf_files = list(uploaded.keys())
merged_pdf = merge_pdfs(pdf_files, custom_name)

# Provide the merged PDF for download
files.download(merged_pdf)

# Show "Download Complete!" message
display(HTML("<h3>üéâ Download Complete! ü•≥</h3>"))